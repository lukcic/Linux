Applications:
ssh                 - client
sshd                - server daemon
ssh-keygen          - generating key pairs
ssh-add, ssh-agent  - tools for keys management
ssh-keyscan         - downloading public keys from servers
sftp-server         - server for sftp file transer
sftp, scp           - clients for sending files

Debian installation:
apt install openssh-server
systemctl status ssh

Packages:
openssh             -tools like ssh-keygen
openssh-server      -server
openssh-clients     -command line ssh client
rsync               -synchronize data between 2 machines using ssh

/etc/ssh/ssh_config     -client config file
/etc/ssh/sshd_config    -server config file
~/.ssh                  -user individual config
~/.ssh/known_hosts      -stores the accepted remote server keys

/etc/ssh/sshd_config:
PermitRootLogin no          # cannot connect as root (be suoder)
Port 2222
PasswordAuthentication no
PubkeyAuthentication yes
X11Forwarding no            #GUI exporting

AllowUsers foo bar hsolo    # allowed users
AllowGroups admins
Banner /etc/banner          # display banner

ChallengeResponseAuthentication no  # Allowed authentication forms
PasswordAuthentication no
RSAAuthentication no
GSSAPIAuthentication no
HostbasedAuthentication no
PubkeyAuthentication yes

ClientAliveInterval 300     # inactive clients disconnection
ClientAliveCountMax 1

LogLevel VERBOSE            # register failed login attemps
MaxAuthTries 3              # 6 by deafult

SSHD works as root, for every connected client creates child process (non-priviledged) with permissions of connected user.

systemctl restart sshd.service      # cnnected users will not disconnect - works in old settings until new connection

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

/etc/ssh/ssh_config:                # different settings of client to connection with different servers using aliases
PasswordAuthentication no           # ssh web or ssh debian
VerifyHostKeyDNS yes                # check for sshfp entries (DNS)
Host web
    HostName 54.84.253.153
    User han
    IdentityFile /home/han/.ssh/id_ecdsa
    ForwardAgent yes
    Port 2222
Host debian
    Hostname debian.admin.com
    User hsolo
    PasswordAuthentication yes
______________________________________________________________________
Keys:
~/.ssh/id_rsa (Private key)
~/.ssh/id_rsa.pub (Public Key)
Public key goes into server ".ssh/authorized_keys" file

Generating keys:
ssh-keygen -t rsa
ssh-keygen -t ed25519
ssh-keygen -t ecdsa -b 384

openssl genrsa -passout pass:[PASSPHRASE] -out [FILENAME].pem 4096

Adding generated private key to local repository:
 
ssh-add [keyfile]

Private key must be 0600! (644 for public)
.ssh directory - 0700

Sending generated public key to server:
cat ~/.ssh/id_rsa.pub | ssh user@server "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >>  ~/.ssh/authorized_keys"
or:
ssh-copy-id -i ~/.ssh/mykey user@host
______________________________________________________________________
SSH Agent
Daemon that stores private keys to use it to connection. 
eval 'ssh-agent -s'         # starting agent

ssh-add [private_key_file]  # adding private key to agent
ssh-add -l                  # list stored keys
ssh-add -D                   # clearing stored keys

SSH Agent can send keys for remote servers to login from remote server to other remote servers.
"ForwardAgent yes" option must be enabled in ~/.ssh/config

#https://www.ssh.com/ssh/agent
______________________________________________________________________
Creating public key from private:
key=/home/ben/.ssh/id_ecdsa
ssh-keygen -yf $key > $key.pub

Private key file stores both keys.
______________________________________________________________________
Connection:
ssh user@host

ssh -i 'private_key_path' user@host
-vvv    -verbose

Executing command:
ssh name@server 'command'
______________________________________________________________________
Copying files by ssh:
scp [file] [user]@[server]:[location]

SFTP:
sftp [user]@[server]
get [FILE]
put [FILE]
bye
______________________________________________________________________
Tuneling:
tar cvfz - [DIRECTORY] | ssh [HOSTNAME] "tar xvfz - [PATH]"
tar cvfz - [DIRECTORY] | ssh [HOSTNAME] "cat >[FILE].tar.gz"

rsync -avz -e ssh [HOSTNAME]:[REMOTEPATH] [LOCALPATH]

Port forwarding - TCP connections can be tunneled securerly using ssh.
Option of sshd: AllowTCPForwarding yes/no

In case when firewall blocks http ports (intranet http server) but no ssh port (22): 
ssh -L 8000:webserver:80 server.admin.com

User connects port 8000 on localhost, that is tunneled to ssh and connects ssh server, ssh server forwards this connection to port 80 on webserver.

______________________________________________________________________

Multiple GH accounts

~/.ssh/config:
```
# Personal GitHub account
Host github.com-personal
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_personal

# Work GitHub account
Host github.com-work
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_work
```

Project`s config
.git/config:
```
[remote "origin"]
  url = git@github.com-personal:YourUsername/YourRepo.git
```

Clonning new repos:
```
git clone git@github.com-personal:YourUsername/YourRepo.git
git clone git@github.com-work:WorkOrg/WorkRepo.git
```

______________________________________________________________________

SSHFP - DNT record type that include fingerprint of ssh server

sshfp server.admin.com # generating sshfp (DNS) entry for servername

Output should be added to domain dns configuration ($ORIGIN directive), reload domain.

https://www.tecmint.com/block-ssh-server-attacks-brute-force-attacks-using-denyhosts/

SSH honeypot:
https://www.youtube.com/watch?v=SKhKNUo6rJU