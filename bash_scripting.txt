
https://mywiki.wooledge.org/BashPitfalls !!!

Scripting rules:
-on the beginning of every script write description with informations needen (arguments, needed libraries etc.);
-in case of no or wrong arguments, script should finish working and give feedback about proper use;
-verify data sended to script (maybe rm -rf);
-script should return 0 code if finished properly and non-0 with error;
-script should use lock to prevent run script many times;   
-use proper names inside script;
-use quotation for inputed data (spaces in paths)
-errors send to STDERR.

Creating scripts:
-write it as oneliner using pipes
-send output to std output or file to not attempt changes on system
-use fc command to save your work in file
-run the script

CTRL + P -will transform many commands to oneliner
sh fc    -will send commands to file, only need to add shebang

cat > superskrypt.sh << EOF ???????????????????????????????????/

Bash - Bourne Again Shell - writed again, because original bash is still under closed AT&T license.

schellcheck [file]  -command to check if script is written properly

#!/bin/bash -shebang for bash (check 'which bash')

Commands used after shebang
set -u              #unassigned; if script is referring to variable that is not defined, immediately finish script
set -e              #exitcode; if any command returned non-zero exit code, immidiately finish script
set -ueo pipefail   #some commands after pipe (etc. sort) returns 0 even if has no input data, in this case $? equal 0, even if all commands combination fails
                    #pipefail protect for this: $? with pipefail returns error code
set -x              #debug every line 

trap read debug     #with this command every line in script is executed only after acceptation: you see the line and accept it with enter (used with set -x)
                    #script may be stopped using CTRL+C (^C)

Running bash scripts:
chmod +x [FILENAME] -add execution permission for file (for all 755)

./scriptname.sh             #.sh is optional
-n -check commands before run
-x -list commands used in script 

sh scriptname.sh           #will run script in new instance of sh

source scriptname.sh       #will run script in actual instance of sh, source command runs script in CURRENT shell

Exporting script as a command:

source ~/.scripts/aws_secrets.sh    # main function in script: "aws_secret"
aws_secret

___________________________________________________________________________

INPUT/OUTPUT:

'tekst' - normal quotation
"tekst" - used when need env variables inside quotation
``      -used to run command inside quotation
echo "Plik passwd ma `wc -l < /etc/passwd` wierszy."
#Plik /etc passwd ma 28 wierszy!.

$[NAME] -variable, variables in bash are always strings, to set variable as integer use $((...))
${[NAME]} - variable

read -p "Text" [VARIABLE] -prompt user for input data to variable NAME

String methods

/ podmienia
# wycina z przodu
% wycina z końca
//  podmienia wszystkie wystąpienia
##  wycina z przodu zachłannie (najdłuszy pasujący)
%%  wycina z końca zachłannie (najdłuszy pasujący)


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Echo vs printf:

$ echo "\taa\tbb\tcc\n"
\taa\tbb\tcc\n
$ printf "\taa\tbb\tcc\n"
 aa bb cc
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
___________________________________________________________________________
Checking script environment:

Lock:
if [-f /tmp/lock.file]; then       #-f checks if given file exists
    echo "Wait until last script run ends work."
    exit;
fi

touch /tmp/lock.file

# script

rm /tmp/lock.file  #if everything is ok

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Checking directory:

cd "$1" || exit                     #$1 - firsth parameter (installation directory), must be in quotation fot paths with spaces; if failed exit (|| -OR)
fileCounter = (ls * | wc -l)        
if [ $fileCounter -gt 0 ]; then       #check if direcotry is empty
    rm -rf "$1"/*                     #if not, delete everything
fi
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Checking last command:

if [ $? -ne 0 ]; then           #$? -last command
    echo "Something went wrong"
    exit;
fi
___________________________________________________________________________
Checking previous command state:

#!/bin/bash

echo "this will work"
RESULT=$?
if [ $RESULT -eq 0 ]; then
  echo success
else
  echo failed
fi

if [ $RESULT == 0 ]; then
  echo success 2
else
  echo failed 2
fi


# OR:
command && echo "OK" || echo "NOK"

# Command result into variable without fail (||:):
IMAGE_META="$( aws ecr describe-images --repository-name=$1 --image-ids=imageTag=$2 ||: )" 

___________________________________________________________________________

IF statement:
# Oneline
if echo "$SERVICE" | grep -q "FrontendStack-Preview"; then echo "MATCH"; else echo "FAIL"; fi

if [ "$NAME" == "Brad"]
then
    echo "Your name is Brad"
fi

if [-z $1]; then      #if given parameter has zero lenght, then (-z -zero lenght, $1 - firsth parameter) 
    echo "No destination directory";
    exit; 
fi

IF-ELSE statement:
if [ "$NAME" == "Brad"]
then
    echo "Your name is Brad"
else
    echo "Your name is not Brad"
fi

ELSE-IF (elif) statement
if [ "$NAME" == "Brad"]
then
    echo "Your name is Brad"
elif [ "$NAME" == "Jack"]
then
    echo "Your name is Jack"
else
    echo "Your name is not Brad or Jack"
fi
___________________________________________________________________________

COMPARISONS:

-eq -equal, returns True if value1 = value2
-ne -not equal, returs True if value1 != value2
-gt -greather than, returns True if value 1 > value2
-ge -greather or equal, return True if value1 >= value2
-lt -less than, returns True if value1 < value2
-le -less equal, returns True if value1 =< value2

NUM1=3
NUM2=5

if [ "$NUM1" -gt "$NUM2" ]
then
    echo "$NUM1 is greather tahn $NUM2"
else
    echo "$NUM1 is less than $NUM2"
fi
___________________________________________________________________________

FILE CONDITIONS:

-d [FILE] -True if the FILE is a directory
-e [FILE] -True if the FILE is exists
-f [FILE] -True if the provided string is a file
-g [FILE] -True if the FILE have set group ID
-r [FILE] -True if the FILE is readable
-s [FILE] -True if the FILE has non zero size
-u [FILE] -True if the FILE have set user ID
-w [FILE] -True if the FILE is writable
-x [FILE] -True if the FILE is executable
file1 -nt file2   -True if file1 in NEWER THAN file2
file1 -it file2   -True if file1 is OLDER THAN file2
___________________________________________________________________________
IF STATEMENTS:

FILE="teext.txt"
if [ -f "$FILE" ]
then
    echo "$FILE is a file."
else
    echo "$FILE is not a file."
fi
___________________________________________________________________________

CASE STATEMENTS:

read -p "Are you 21 or over? Y/N" ANSWER
case "$ANSWER" in
    [yY] | [yY][eE][sS])
     echo "You can have a beer :)"
     ;;
    [nN] | [nN][oO])
     echo "Sorry you can not have a beer :("
     ;;
    *)
     echo "Please answer y/yes or n/no"
     ;;
esac

___________________________________________________________________________

FOR LOOP:

IFS - Internal Field Separator
Used to decide which character will create new array position


NAMES="Brad Kevin Alice Mark"
for NAME in $NAMES
    do
        echo "Hello $NAME"
done

FILES=$(ls *.txt)
NEW="new"
for file in $FILES
    do
        echo "Renaming $FILE to new-$FILE"
        mv $FILE $NEW-$FILE
done

WHILE LOOP:

LINE=1
while read -r CURRENT_LINE
    do
        echo "$LINE: $CURRENT_LINE"
        ((LINE++))
done < "./file.txt"         #reading from file.txt

___________________________________________________________________________

FUNCTIONS:

function sayHello() {
    echo "Hello World!"    
}

sayHello


FUNCTION with PAREMETERS:

function greet() {
    echo "Hello, I am $! and I am $2."
}

greet "Brad" "36"


PARAMETER types:
$0 - name of the script
$1 - $9 - firsth to ninth argument
$@ - all arguments
$# - number of arguments
$* - all arguments at once
$$ - PID of the script
!! - repeat last command (sudo !!)
$_ - last argument of the last command
$? - return code of the prev command

if [ $# -ne 2 ]; then
    echo 'Must write 2 arguments'

___________________________________________________________________________

Return code (how command execution went):
0 (boolean) - its OK
1 (boolean) - error occurs

True - always 0 return code
False - always 1 return code
echo always return 0 (ok)

Operators:
&& - and (second will run only when first ends successfully)
|| - or (second will run only when first fails)
; - just separate commands in one line

0 - standard input (stdin)
1 - standard output (stdout)
2 - standard error (stderr)

2> redirect standard error
&> redirect both, standard output and standard error
2>&1 - redirect standard error to standard output (to use pipe)

find / -name core > /tmp/plikicore 2> /dev/null #will serch for files with 'core' in name and save names in file, errors will be ignored
___________________________________________________________________________
Command substitution
$(command) - execute the command and place the output to the variable

for file in $(ls)
executes the ls command, iterates the values  

#Using the output of ls to get filenames is a bad idea. It can lead to malfunctioning and even dangerous scripts. 
#This is because a filename can contain any character except / and the nullcharacter, and ls does not use either of those characters as delimiters, 
#so if a filename has a space or a newline, you will get unexpected results.

#There are two very good ways of iterating over files. Here, I`ve used simply echo to demonstrate doing something with the filename; you can use anything, though.
#The first is to use the shell`s native globbing features.


for dir in */; do
  echo "$dir"
done

The shell expands */ into separate arguments that the for loop reads; even if there is a space, newline, or any other strange character in the filename, for will see each complete name as an atomic unit; it`s not parsing the list in any way.

If you want to go recursively into subdirectories, then this won`t do unless your shell has some extended globbing features (such as bash`s globstar. 
If your shell doesn`t have these features, or if you want to ensure that your script will work on a variety of systems, then the next option is to use find.

find . -type d -exec echo '{}' \;