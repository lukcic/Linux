.. -up
. -current directory
- -previous directory

file [FILE] -shows type of file (binary, text)
stat [FILE] -shows information about file (disk usage, timestamps, access)

Filetypes:
-       -normal file (text, binary, library)
d       -direcory
c       -character device (eg. pseudoterminal file /dev/tty)
b       -block device (eg. disk file /dev/sda), this files are only contactpoints, not drivers
s       -socket file - connections between processes to give them communicate, many types (most use network) and local Unix sockets  
p       -stream (potok) - FIFO files, communication between processes on local machine (like local sockets used today)
l       -symbolic links (like Windows shorcuts), work even source is moved

There are 3 kind of "timestamps":
Access - (atime) the last time the file was read
Modify - (mtime) the last time the file was modified (content has been modified)
Change - (ctime) the last time meta data of the file was changed (e.g. permissions)
______________________________________________________________________________________________________________
echo [STRING] - displays STRING

touch [FILE]            -creates empty file or timestamps of existing file
touch my\ big\ file     -making files with special charachters in name (spaces)

cat -concatenate (powiązać), forward STDIN to STDOUT. Displays choosen file. CTRL + D to end.
cat [FILE1] [FILE2] - shows content of files
-n -add line numbers of text
-e -shows eol
-T -show tabs
cat > [FILE] - will wait for text and save it in FILE (^D ends)
cat [TEXT] > [FILE] - override a FILE with TEXT
cat [TEXT] >> [FILE] - append a TEXT to FILE

zcat [FILE] -view contents of ziped file (gzip)
bzcat - ---||--- (bzip2)
xzcat - ---||--- (xz)
______________________________________________________________________________________________________________

ls
-l -shows properties
-a -show all files (with hidden)
-h -show size in human readable format
-d -shows only directories
-r -show files in reverse
-i -shows inode number
-R -shows files inside subfolders (recursive)
-S -shows files sorted by SIZE (--sort=size)
-t -shows files sorted by time (--sort=time)
-u -shows files sorted by usage time (--sort=use)
-X -shows files sorted by extension (--sort=extension)
-I[pattern] - ignore fles with this pattern
-Z -shows file context (SELinux)

Directory:
Read on directory - only listing content of directory.
Execute on directory - acces to files in directory.

ls direcory/subdirectory        #listing relative path
ls /direcory/subdirectowy       #listing absolute path
______________________________________________________________________________________________________________
Linux main directories:
/bin                -binaries (basic executables: ls, gzip, curl)
/sbin               -system binaries (executables that should be run only by root user - they needs sudo)
/lib                -shared libaries
/usr                -additional (users or less important) files hierarchy
/usr/tmp            -additional temp (files are not deleted at startup)
/usr/bin            -non-essential installed binaries
/usr/local/bin      -binaries locally compiled by users
/etc                -editable configuration files and other files that system need to start
/boot               -files needed to boot the system (kernel etc)
/dev                -device files
/opt                -optional software packages
/var                -variable files (logs, cache)
/proc               -files created by kernel in fly to manage processes
/tmp                -temporary files deleted after reboot (/var/tmp - that doesn`t)
/mnt                -temp mount points
/run                -contact points to running processes
/srv                -files distributed by www or shared for another servers
/sys                -kernel interfaces
______________________________________________________________________________________________________________
man -k [phrase]     -searching for a phrase in all man pages
apropos [phrase]    -searching for a phrase in all man pages
info [command] -new version of command help
type [command] -similar to wchich

Reloading man pages:
mandb       #Ubuntu
makewhatis  #RHEL

[ -x ]          -optional
{ a | b }       -choose a or b
filename ...    -may be more than one filename
______________________________________________________________________________________________________________

> redirect with overriding the file (always makes a file)
>> redirect with appending to a file
| (pipe) - redirect standard output from 1 command to standard input of another

command > file
command1 | command2

0 - standard input (/dev/stdin) 
1 - standard output (/dev/stdout)
2 - standard error (/dev/stderr)
1> redirect standard output
2> redirect standard error
&> redirect both, standard output and standard error
1>&2 - redirect standard output to standard error
2>&1 - redirect standard error to standard output to catch output of error 
ls -ly > log.txt 2>&1

sort < [FILE] > [SORTED FILE]
______________________________________________________________________________________________________________

XAGRS - this command takes output list returned by one command (or from file) and send it as arguments of another command. 
Without second command use 'echo' by default.

command1 | xargs -0 command2
-0 -used if spaces in filenames

find /home -type f -size +1M -print0 | xargs -0 ls -l
#will find files and list it using ls -l option

find ~/Pictures -name "*.png" -type f -print0 | xargs -0 tar -cvzf images.tar.gz
#will find all PNGs in Pictures folder and tar it to given archive

https://www.tecmint.com/xargs-command-examples/
______________________________________________________________________________________________________________

ALT + . -repeat argument from last command
CTRL + A -moves cursor to left side
CTRL + E -moves cursor to the right side
CTRL + W -delete word
CTRL + U -cut to bash clipboard (from cursor to left side)
CTRL + K -cut to bash clipboard (from cursor to right side)
CTRL + Y -paste from clipboard
CTRL + T -change place of 2 letters (mistakes correction)

sudo !! -repeat last command with sudo

less +F [LOGFILE] -will open the last log lines and move backwards

Shell globbing:
wc -l *.pl
wc -l ?.pl
______________________________________________________________________________________________________________
Archives:

tar [OPTIONS] [ARCHIVE] [FILES]
-f -file, use archive filetype
-v -verbose (gadatliwy) lists procesed files
-c -creates archive from multiple files
-x -extract files from archive
-z -zip (compress archive)
-t -list table of contents 
-p -extracted files have own permissions (not umask)

tar czvf archive.tar.gz [FILES] -archive files with compression     # do not use -  !!!
tar xzvf archive.tar.gz -C [LOCATION] -decompress files             # do not use -  !!!

gzip [FILE-TO-COMPRESS]     #will delete input file after compression
-k                          #leave the input
-r recursive

gunzip [FILE-TO-DECOMPRESS]

ls | cpio -o > archive.cpio -archive listed files 
cpio -id < archive.cpio -unarchive files
-o -create output file
-i -extract
-d -create destination directory
______________________________________________________________________________________________________________
mkdir [NAME]
-p -creates directories recursively
-m 777 -creates direcotry with specified permissions


rm [FILE/DIR]
-r -removes files and dirs recursively
-f -removes non empty dirs (forced)
-i -asks before removing


ln [SOURCE] [DEST]      -creates hard link to file (to bits on disk). Hard link increase link counter. File can be deleted when all hard links are unlinked. One permissions and attributes to all inks.  
ln -s [SOURCE] [DEST]   -creates symbolic link (shortcut to filename), do not increase link conuter. Do not have permissions
unlink [FILE]           -deletes link

Hard link points to the same address of memmory (inode - disk place) of target file, 
symbolic link points to filename of target file.

An inode is a data structure that stores attributes for an object (like a file or directory) on a filesystem. 
Among those attributes are permissions, ownership and on which blocks of the disk the data for the object is stored. 
Think of it as an entry on an index, hence the name, which comes from “index node”.

______________________________________________________________________________________________________________
Searching:
which [process name]        -search for path of process binary
whereis [process name]      -search for path of binary in $PATH

locate [filename]           -search for all files that name contains [filename]  #install mlocate pakage
locate -b '\[FILENAME]'     -search for files with exactly [FILENAME]
-i -ignore CauseSensitive
-c -count searched files

locate -S -status of files database
updatedb -refresh db of files

find [STARTING_PATH] [OPTION] [EXPRESSION]

find [where] -name [name] -type [f/d/l]
-print0 -works fine with names that includes spaces
-iname [name] -ignores CauseSensitive
-not  -show opposite results
-user [username] -search for files that [user] is owner
-mtime +5 -search files modified more than 5 days ago
-mmin -5 -search files modified in last 5 minutes
-atime [value] -files accesed (opened) in [value] days
-perm [0664]  -searches for files with this permissions
-maxdepth [1] - maximum depth of recursiving dirs
-size +100M -searches files larger than 100 MBytes

find [where] -name [name] -or -name [name2]
find [where] -name [name] -and -not -name [name2]
find [where] -name "pa*" -and -name "*wd"

find [where] [parameter] [value] -exec [command] {} \;
{} - here find will insert searched filenames
\; - obligatory with -exec

find /home -type f -user [USERNAME] -exec mv {} {}_old \;
-search files where [USERNAME] is owner and change their name (add _old) 
-ok -the same as exec but needs 

find [where] -iname [name] -exec grep -i -n [text] {} + | tee [file]
tee - print output on the screen and stores in file (duplicates output)

______________________________________________________________________________________________________________

^R (CTRL+R) - searching in bash history

^R
enter text
^R - next propositions
^O - execute searched command
^G leave searching

HISTIGNORE in .bashrc - add ls and similar commands
export HISTIGNORE="ls:ps:history"

bash -will start new bash session that is child of main bash process

https://www.tecmint.com/history-command-examples/
______________________________________________________________________________________________________________
Variables:
set can see shell-local variables, env cannot.

Shells can have variables of 2 types: locals, which are only accessible from the current shell, and (exported) environment variables, 
which are passed on to every executed program.
Since set is a built-in shell command, it also sees shell-local variables (including shell functions). 
env on the other hand is an independent executable; it only sees the variables that the shell passes to it, or environment variables.
When you type a line like a=1 then a local variable is created (unless it already existed in the environment). 
Environment variables are created with export a=1

env -lists environment variables
printenv -lists environment variables
cat $PATH   -show value of PATH variable

[VAR_NAME]=[VALUE]          -saving shell environment
export [VAR_NAME]=[VALUE]   -saving new environment variable 
set - 
unset [var name] -deleting variable

______________________________________________________________________________________________________________
Shell functions
Functios written in .bash_profile file for used in everyday work:

function backup () {                        #function name
 newname=$1.`date +%Y-%m-%d.%H%M.bak`;      #string newname will be: firsth arg.date.bak
 mv $1 $newname;                            #rename file to newname
 echo "Skopiowano $1 do $newname.";         #print info
 cp -p $newname $1;                         #copy(-p = with saving permissions) backup file to old name 
}

Usage:
backup ffile
Copied ffile to ffile.2017-02-05.1454.bak.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
~/.bash_profile:
ssh() {
    /usr/bin/ssh -p 7988 $*
}

In this case ssh command will always use port 7988 instead 22.
______________________________________________________________________________________________________________
Alias:
alias ls='ls -Fh'       #change ls to ls with arguments
______________________________________________________________________________________________________________

CTRL+ALT+F1 - switch from GUI/CONSOLE mode
CTRL+ALT+F2

______________________________________________________________________________________________________________
Checksum:

sha256sum [FILE] -generating chacksum SHA256 (others: md5sum and sha512sum)
sha256sum -c [FILE_WITH_CHECKSUM] -comparing file with a text file that contains another checksum in plaintext

oc [FILE] -octal dump od FILE
command is listing file in octal format
-x  -view file in hex format
-c  -view file in character format (with non printed signs)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
base64 encoding - binary to text conversion
udo apt install cl-base64 -y

Decode:
cat [TEXT] | base64
Encode:
cat [ENCRYPTED TEXT] | base64 -d
cat [ENCRYPTED TEXT] | base64 --decode
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
id -un  #show anme of logged user (like whoami)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
lint - Unix program that analyse C code looking for mistakes like typos etc.
This term is usually used to check files for mistakes (configuration files etc).

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
hash  vs encrpt
hash - cannot reverse data from hash
encrypt - can be decrypted using keys