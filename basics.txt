.. -up
. -current directory
- -previous directory

echo [STRING] - displays STRING

touch [FILE]            -creates empty file or timestamps of existing file
touch my\ big\ file     -making files with special charachters in name (spaces)

cat -concatenate (powiązać), forward STDIN to STDOUT. Displays choosen file. CTRL + D to end.
cat [FILE1] [FILE2] - shows content of files
-n -add line numbers of text
-e -shows eol
-T -show tabs
cat > [FILE] - will wait for text and save it in FILE (^D ends)
cat [TEXT] > [FILE] - override a FILE with TEXT
cat [TEXT] >> [FILE] - append a TEXT to FILE

zcat [FILE] -view contents of ziped file (gzip)
bzcat - ---||--- (bzip2)
xzcat - ---||--- (xz)
______________________________________________________________________________________________________________
man -k [phrase] -searching for a phrase in man pages
apropos [phrase] -search through the man pages names and descriptions
info [command] -new version of command help
type [command] -similar to wchich
______________________________________________________________________________________________________________

> redirect with overriding the file (always makes a file)
>> redirect with appending to a file
| (pipe) - redirect standard output from 1 command to standard input of another

command > file
command1 | command2

0 - standard input (/dev/stdin) 
1 - standard output (/dev/stdout)
2 - standard error (/dev/stderr)
1> redirect standard output
2> redirect standard error
&> redirect both, standard output and standard error
1>&2 - redirect standard output to standard error
2>&1 - redirect standard error to standard output to catch output of error 
ls -ly > log.txt 2>&1

sort < [FILE] > [SORTED FILE]
______________________________________________________________________________________________________________

ls
-l -shows properties
-a -show all files (with hidden)
-h -show size in humar readable format
-d -shows only directories
-r -show files in reverse
-R -shows files inside subfolders (recursive)
-S -shows files sorted by SIZE (--sort=size)
-t -shows files sorted by time (--sort=time)
-u -shows files sorted by usage time (--sort=use)
-X -shows files sorted by extension (--sort=extension)
-I[pattern] - ignore fles with this pattern
-Z -shows file context (SELinux)

Directory:
Read on directory - only listing content of directory.
Execute on directory - acces to files in directory.

umask 022 - new files can be accessed by everyone
umask 077 -new files can be accessed only by user
______________________________________________________________________________________________________________

ALT + . -repeat last argument
CTRL + A -moves cursor to left side
CTRL + E -moves cursor to the right side
CTRL + W -delete word
CTRL + U -cut to bash clipboard (from cursor to left side)
CTRL + K -cut to bash clipboard (from cursor to right side)
CTRL + Y -paste from clipboard
CTRL + T -change place of 2 letters (mistakes correction)
______________________________________________________________________________________________________________
Archives:

tar [OPTIONS] [ARCHIVE] [FILES]
-f -file, use archive filetype
-v -verbose (gadatliwy) lists procesed files
-c -creates archive from multiple files
-x -extract files from archive
-z -zip (compress archive)
-t -list table of contents 
-p -extracted files have own permissions (not umask)

tar -czvf archive.tar.gz [FILES] -archive files with compression
tar -xzvf archive.tar.gz -C [LOCATION] -decompress files

gzip [FILE-TO-COMPRESS]
gunzip [FILE-TO-DECOMPRESS]

ls | cpio -o > archive.cpio -archive listed files 
cpio -id < archive.cpio -unarchive files
-o -create output file
-i -extract
-d -create destination directory
______________________________________________________________________________________________________________
mkdir [NAME]
-p -creates directories recursively
-m 777 -creates direcotry with specified permissions


rm [FILE/DIR]
-r -removes files and dirs recursively
-f -removes non empty dirs (forced)
-i -asks before removing


ln [SOURCE] [DEST] -creates hard link to file. Hard link increase link counter. File can be deleted when all hard links are unlinked.  
ln -s [SOURCE] [DEST] -creates symbolic link (shortcut), do not increase link conuter. 
unlink [FILE] -deletes link

Hard link points to the same address of memmory (disk place) of target file, 
symbolic link points to filename of target file.
______________________________________________________________________________________________________________

file [FILE] -shows type of file (binary, text)
stat [FILE] -shows information about disk usage of file

wc [FILE] -(word count) summary of lines, words and characters in FILE
-l  -sum lines
-w  -sum words
-c  -sum characters

tail -displays end lines of file
-3 -shows last 3 lines
-f -shows file changes in live mode (logs etc.)

head - display beginning of file
-n X -shows first X lines

cut - print (or cut) columns of text files ordered by character separators

paste -join files in columns ordered by character separatos

split -split larger files into smaller 

sort -sorting the output (alphabeticaly, rev alph, random)

uniq -list (and count) matching strings, this command can find and delete repeated lines in the file
uniq [FILE] -cat FILE without repeated lines
-c -shows how many times line exists
-D -shows only repeated lines

nl -numbering lines

tr -(translate) replace characters, removes and compress repeating characters

tee -command output is redirected both to the file and for stdout
-a -append data to file

xargs -command used to send output of first command as the parameters to second command
-n X -how many arguments at the time will be send to second command
-L -how many lines can be used as aruments per command execution
-0 -tells the xargs that null character must be used as the separator (find -print0)

______________________________________________________________________________________________________________

grep [OPTION] "text" [file/dir]
-i -ignore cause sensitive
-n -returns the line number with text
-v -inverse (odwrócenie)
-E -extender regular expressions
^# -line starts with this sigh - hash (carrot)
word$ -line ends with 'word'
dot[Cc]om -both versions of word

grep -E '(a+)' - a one ore more times
grep 'C...y' - words starts with C and ends with y
______________________________________________________________________________________________________________
SED - stream editor for filtering and transformation text. A common use of sed is to find and replace the text within a file.

sed -n /[PATTERN]/p < ftu.txt
-n -no output (by default sed print everything)
p -print PATTERN
d -delete PATTERN from output

sed s/[PATTERN]/[NEW_PATTERN] <[FILE.txt] -replacing PATTERN to NEW_PATTERN in whole FILE
sed -i.backup s/[PATTERN]/[NEW_PATTERN]/ [FILE.txt] -replacing PATTERNS with making backup file
-i -sed will work on oryginal file
-i.backup -sed will make a backup file

______________________________________________________________________________________________________________
Searching:
whereis [process name] - search for path of binary in $PATH

finf [STARTING_PATH] [OPTION] [EXPRESSION]

find [where] -name [name] -type [f/d/l]
-iname [name] -ignores CauseSensitive
-not  -show opposite results
-user [username] -search for files that [user] is owner
-mtime +5 -search files modified more than 5 days ago
-mmin -5 -search files modified in last 5 minutes
-atime [value] -files accesed (opened) in [value] days
-perm [0664]  -searches for files with this permissions
-maxdepth [1] - maximum depth of recursiving dirs
-size +100M -searches files larger than 100 MBytes

find [where] -name [name] -or -name [name2]
find [where] -name [name] -and -not -name [name2]
find [where] -name "pa*" -and -name "*wd"

find [where] [parameter] [value] -exec [command] {} \;
{} - here find will insert searched filenames
\; - obligatory with -exec

find /home -type f -user [USERNAME] -exec mv {} {}_old \;
-search files where [USERNAME] is owner and change their name (add _old) 
-ok -the same as exec but needs 

find [where] -iname [name] -exec grep -i -n [text] {} + | tee [file]
tee - print output on the screen and stores in file

locate [filename] -search for all files that name contains [filename]
locate -b '\[FILENAME]' -search for files with exactly [FILENAME]
-i -ignore CauseSensitive
-c -count searched files

locate -S -status of files database
updatedb -refresh db of files

______________________________________________________________________________________________________________

^R (CTRL+R) - searching in bash history

^R
enter text
^R - next propositions
^O - execute searched command
^G leave searching

HISTIGNORE in .bashrc - add ls and similar commands
export HISTIGNORE="ls:ps:history"

bash -will start new bash session that is chaild of main bash process
______________________________________________________________________________________________________________
Variables:
set can see shell-local variables, env cannot.

Shells can have variables of 2 types: locals, which are only accessible from the current shell, and (exported) environment variables, which are passed on to every executed program.
Since set is a built-in shell command, it also sees shell-local variables (including shell functions). 
env on the other hand is an independent executable; it only sees the variables that the shell passes to it, or environment variables.
When you type a line like a=1 then a local variable is created (unless it already existed in the environment). 
Environment variables are created with export a=1

env -lists environment variables
cat $PATH   -show value of PATH variable

[var name]=[value]
export [var name] -saving new environment variable 
set - 
unset [var name] -deleting variable
______________________________________________________________________________________________________________
gcc compiler

gcc [FILE.c] -o [OUTPUT_FILENAME]

./[OUTPUT_FILENAME]

Makefile:
[PROGRAMNAME]: [FILE.c]
    gcc [FILE.c] -o [OUTPUT_FILENAME]

clean:
    rm [OUTPUT_FILENAME]

make

make clean -use function 'clean' from Makefile

make -compiles file to binary
______________________________________________________________________________________________________________

crontab -e -open cron editor

5 fields:
-minute 0-59
-hour 0-23
-day of a month 1-31
-month 1-12 or names
-day of a week 0-7 or names (sunday is 0 and 7)

* * * * * [COMMAND_ABSOLUTE_PATH]
______________________________________________________________________________________________________________
CTRL+ALT+F1 - switch from GUI/CONSOLE mode
CTRL+ALT+F2
______________________________________________________________________________________________________________

nfs-utils
rpcbind.service -Remote Procedure Call service (required by nfs). Port 111 TCP & UDP. 
systemctl start rpcbind.service
systemctl start nfs-server.service -NFS uses 2049 port TCP & UDP.

Exporting directories are stored in /etc/exports
Shares need permissions.
exportfs -exporting directories

NFS exports must be allowed by firewall:
firewall-cmd --zone=public --add-service=rpc-bind --permanent
firewall-cmd --zone=public --add-service=nfs --permanent
firewall-cmd --list-all  

Mounting nfs share:
mount [REMOTE_SERVER]:[SHARE] [MOUNTPOINT]
______________________________________________________________________________________________________________

SAMBA packages:
samba -install samba and dependencies
samba-client -navigata through remote samba clients
cifs-utils -mount samba shares

smb.service
firewall-cmd --zone=public --add-service=samba --permanent

/etc/samba

smb.conf example:
[SHARENAME]
comment = "Comment"
path = [PATH]
public = yes
writable = yes
printable = no

Samba SELinux context:
chcon -t samba_share_t [FILENAME]
______________________________________________________________________________________________________________

httpd -Apache service
mod_ssl -HTTPS fo Apache

Main configuration file:
/etc/httpd/conf/httpd.conf

Additional configurations:
/etc/httpd/conf.d

Web pages location:
/var/www/html

SELinus context types:
httpd_sys_content_t -System Web Pages
httpd_sys_script_exec_t -System CGI Scripts or executables files
httpd_user_content_t -User Web Pages
httpd_user_script_exec_t -User CGI Scripts or executable files
______________________________________________________________________________________________________________

MariaDB
No default root password.

Packages:
mariadb -client programs
mariadb-server -server software
MySQL-python -MySQL Python Interface

/etc/my.cnf.d -configuration directories

write basic commands!

______________________________________________________________________________________________________________

Terminals -devices used to sending data between system and input\outpu devices (printing text on screen).
In the past they were devices like typingmachines. 

PseudoTermianl devices - kernel is communicating with programmed i/o interface (eg. shell) instead real terminal device.

/dev/tty1 -first virtual console
dev/pts/0 -first pseudoterminal device

Linux have many virtual consoles. 
ALT + Fx - changing console (text mode)
ALT + F1 - /dev/tty1
ALT + F2 - /dev/tty2
CTRL + ALT + Fx - changing console (gui mode)

______________________________________________________________________________________________________________
Checksum:

sha256sum [FILE] -generating chacksum SHA256 (others: md5sum and sha512sum)
sha256sum -c [FILE_WITH_CHECKSUM] -comparing file with a text file that contains another checksum in plaintext

oc [FILE] -octal dump od FILE
command is listing file in octal format
-x  -view file in hex format
-c  -view file in character format (with non printed signs)

















