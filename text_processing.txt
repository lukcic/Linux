Regular expressions:
Used to validate text and search through text.

https://regexr.com

/   /   -search pattern, by default works once 
/   /g  -makes search/changes many times 
/bob/   -literal patter

atom -the smalles (basic) element of regular expression.
.       -one any character
^       -atom is on the beginning of the line
$       -atom is on the end of the line
\<      -here new word is beginning
\>      -here word is ending
\b      -here is the edge of the word (any new word isn`t beginning here and any word is ending here)
\B      -here is`t the edge of  the word
[ab]    -a or b, eg. [AEO]la = Ala, Ela, Ola
[1-9]   -digits from 1 to 9
()      -grouping, eg. /(Bob|Alice) Smith/g

Quantifiers:
*       -previous atom MAY occur 0 or more times, eg. /color*/g gives 'colo', 'color' or 'colorrrrrr'
11*0  -1 (second sign) must appear 0 ore more times, so answer: 10, 110, 111110, 11111111111111111111110 etc

+       -previous atom MAY occur 1 or more times
?       -previous atom MAY occur 0 or 1 times, eg. /colou?r/g gives 'color' and 'colour'

Bounds (granice):
{i}     -atom (previous character) must appear exactly i times, eg. [[:blank:]]{2} matches with exactly 2 blank characters
{i,}    -atom MUST appear at least i times, eg. [[:blank:]]{2,} matches with any sequence of 2 or more blank characters 
{,i}    -atom MUST appear at most i times
{i,j}   -atom MUST apper at least i times and at most j times, eg. xyz{2,4} matches the xy string followed by 2 to 4 the z character

10\{2,4}1 - zero (second sign) must appear at min 2 max 4 times, so answer: 1001, 10001, 100001 

Any email addres:
egrep "\S+@\S+.\S+"

Any IP addres:
egrep "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"

List the content of file without comments:
grep -V ^# [FILENAME]

Remove tags from html:
s/<[^>]*>//g                -will replace any content enclosed in <> by an empty string.

Classes:
[:alnum:]   -alphanumeric character
[:alpha:]   -alphabetic character
[:ascii:]   -ASCII character
[:blank:]   -blank character (tab or space)
[:cntrl:]   -control character
[:digit:]   -gigit character (0-9)
[:graph:]   -any printable character except space
[:print:]   -any printable character even space
[:space:]   -white-space character (space, newline \n, carriage return \r, horizontal tab \t...)
[:lower:]   -lowercase character
[:upper:]   -uppercase letter
[:punct:]   -any printable character which is not space or an alphanumeric character
[:xdigit:]  -hexadecimat digit (0-F)

Basic and regular expressions???????????
______________________________________________________________________________________________________________
GREP - pattern finder (inside files):

grep [OPTION] "text" [file/dir]
-i -ignore cause sensitive
-n -returns the line number with text
-v -inverse (odwr√≥cenie)
-E -extender regular expressions (the same as egrep)
-F -Interpret PATTERNS as fixed strings, not regular expressions (teh same as fgrep)
-c -counter of lines
-f -indicate a file that contains regex
-H -given line includes filename
-z -neded with find -print0 (no endline mark)
-l -show file names instead of file contents portions
-1 -gives extra empty lines between matches (-C 1)

^# -line starts with this sigh - hash (carrot)
word$ -line ends with 'word'
dot[Cc]om -both versions of word

grep -E '(a+)' - a one ore more times
grep 'C...y' - words starts with C and ends with y

grep -iR "linux" /home/user/Documents

Return codes:
0 - if grep found text
1 - if grep didn`t found text
2 - if critical exception
______________________________________________________________________________________________________________
SED - stream editor for filtering and transformation text. A common use of sed is to find and replace the text within a file.

sed -n /[PATTERN]/p < ftu.txt
/.../ -regex
-n -no output (by default sed print everything)
p -print PATTERN
d -delete PATTERN from output, eg. 1d removes first line, "1,5d;12d" removes line 1,5 and 12
c -change eg. /[PATTERN]/c [NEWTEXT]
a -append text to newline, under the line with pattern
r -append text from file, need [FILENAME]
w -opposite of r, cut patternt to FILE
s -replace s/FIND/REPLACE/, g flag is used to do more than 1 replace in line 

sed s/[PATTERN]/[NEW_PATTERN] <[FILE.txt] -replacing PATTERN to NEW_PATTERN in whole FILE
sed -i.backup s/[PATTERN]/[NEW_PATTERN]/ [FILE.txt] -replacing PATTERNS with making backup file
-i -sed will work on oryginal file
-i.backup -sed will make a backup file

sed -e "/^#/d" [FILENAME]] -shows the contents of the file without the lines beginning with #(comment lines).

______________________________________________________________________________________________________________

AWK

awk '{print $1}'    # will cut firsth column only
aws s3 ls s3://bit-dev-bright-www-backup/2022-06 | awk '{print $4}'

https://www.howtogeek.com/562941/how-to-use-the-awk-command-on-linux/

awk '{print $(NF)}' # will print last column

______________________________________________________________________________________________________________

CUT - divide text for columns separated by given character (Tab delault)

cut -c 32-  # cut characters from 32 to end

cut -d[SEPARATOR] -f[COLUMNS]
cut -d: -f1,6 /etc/passwd      #show column 1 and 6 (: is separator), will show usename and home direcotry of users
______________________________________________________________________________________________________________

SORT - sorting the input

sort -t: -k3,3 -n /etc/group
-r      -reverse
-u      -only unique records (duplicates removed)
-b      -ignore empty characters on the beginning
-f      -ignore cause sensitive
-h      -sort human-readable values (for sorting 'du -h' and 'df -h')
-k      -columns that make sorting key
-n      -change to integer sorting (by fefault dictionary sorting: 1, 10, 2 etc)
-t      -change separator (empty signs as default)
______________________________________________________________________________________________________________

UNIQ -list (and count) matching strings, this command can find and delete repeated lines in the file

uniq [FILE] -will show FILE without repeated lines
-c -shows how many times line exists
-d -shows only repeated lines
-u -shows only unique lines

cut -d: -f7 /etc/passwd | sort | uniq -c  #check how many users use different shell
______________________________________________________________________________________________________________

WC -word count

wc [FILE] -(word count) summary of lines, words and characters in FILE
-l  -sum lines
-w  -sum words
-c  -sum characters
______________________________________________________________________________________________________________

TAIL -displays end lines of file
-3 -shows last 3 lines
-f -shows file changes in live mode (logs etc.)
______________________________________________________________________________________________________________

HEAD - display beginning of file
-3      -shows last 3 lines
-n X    -shows first X lines
______________________________________________________________________________________________________________

TEE -command input is redirected in 2 places: input to output & input to file (or terminal)
-a -append data to file

find / -name core 2> /dev/null | tee /dev/tty | wc -l #this command will serch files namd 'core', list their paths and send output to 'wc' to count number of them
______________________________________________________________________________________________________________

______________________________________________________________________________________________________________

paste -join files in columns ordered by character separatos

split -split larger files into smaller 

nl -numbering lines

tr -(translate) replace characters, removes and compress repeating characters

xargs -command used to send output of first command as the parameters to second command
-n X -how many arguments at the time will be send to second command
-L -how many lines can be used as aruments per command execution
-0 -tells the xargs that null character must be used as the separator (find -print0)