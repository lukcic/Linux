URL Structure:
"protocol://[username:password@]hostname[:port][/path][?query][#fragment]"

Protocol and hostname are obligatory, rest is optional.
Hostname: domain, ip or hostname.
Queries: key=value pairs divided by '&'
protocols: http, https, ws (Websocket), wss (Websocket TLS), ftp, ldap etc.
Sensitive data should be send in request body not in url!
Fragment - part of given www site.

user agent - http client (browser)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Http transactions:
HTTP is stateless - every request is completly independent (single transaction).

1. HTTP Requests 

METHOD RESOURCE HTTP_VERSION
[METHOD] [URL] [HTTP_VERSION]
GET /index.html HTTP/1.1

Methods (verbs):
-GET        -retrieves data (given resorce) from server, secure, have data limits, how to count them (headers included?)??
-POST       -submits (inserts) data from query BODY to given resource on server, unsecure
-HEAD       -downloads metadata without payload, secure
-DELETE     -deletes given resource, unsecure
-PUT        -inserts data from query to given resource but overrides resource (update data), unsecure
-OPTIONS    -shows which methods can be accepted and resposed by server, secure

Secure methods do not change server state.
GET can be used to send data to server, but all data is visible in URL. Should be use for sending parameters like content filters  etc. 


2. HTTP Responses

HTTP/1.1 200 OK
HTTP_VERSION CODE STATUS


Http response codes:
-1xx    -INFORMATIONAL, request received, processing, eg. 101 SWITCHING PROTOCOLS
-2xx    -SUCCESS, eg. 200 OK, 201 CREATED
-3xx    -REDIRECT, eg. 301 MOVED PERMANENTLY, 304 NOT MODIFIED (site was cached at all)
-4xx    -CLIENT ERROR, eg. 404 NOT FOUND, 403 FORIDDEN (zabroniony)
-5xx    -SERVER ERROR, eg. 502 BAD GATEWAY, 503 SERVICE UNAVAILABLE

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
MESSAGE HEADERS
Metadata of message: compression allowed, which types of content are accepted, how to use cache with data, etc.
Headers are separeted from message body using empty line.  
In request only host is obligatory (server service must know which domain we want to request).

HEADER TYPES:
1. GENERAL:
-Request URL
-Request Method
-Status Code
-Remote Address
-Referrer Policy (go to page from other page, used link)

2. REQUEST:
-Cookie (sending your cookie to server)
-Accept-xxx (xxx -encodings, language etc.)
-Content-Type 
-Content-Lenght
-Authorization (token)
-User-Agent (user software, browser etc)
-X-Forwarded-For 
-Refferer (address of site from client was forwarded)

Refferer - if on my webstite is located external link, while clicking it my browser set Refferer 
(addres of my site, that can include sensitive data in URL), so this external website server gets my URL with sensitive data (session ID etc).
Use Reffere-Policy: no-refferer

3. RESPONSE:
-Server (Apache, Nginx)
-Set-Cookie (send cookie from server to client)
-Content-Type (html, css, json etc.)
-Content-Lenght 
-Location (forwards client to another address)
-Date

SECURITY HEADERS            #give browser information how to handle my site
-X-XSS-Protection           -do not run scripts from outside 
-X-Frame-Options            -do not put my site in iframe
-Content-Security-Policy    -use whitelist of elements and domains on my site
-Strict-Transport-Security  -do not go back from https to http (http is invisible for browser)
-Secure                     -cookies are transported only using https
-Httponly                   -Java Script do not see cookies (they are only for html)
-Refferer-Policy            -browser will not send refferer outside (refferer - address bar, domain and rest)

CRLF - line separator (Kszding) in hex: 0d0a0d0a
One CRLF is needed after Host header, second after all headers. With only one CRLF http server will be waiting for another.

Cache headers 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
MESSAGE BODY
In request body may incluse method parameters or file to send to server. 
In response, body includes resource wanted by client (http file, picture, other binary data etc).
May be empty (if response for get with error code). 

______________________________________________________________________________________________________________
HTTP/1.1
Connection: Keep-Alive header. Clients and servers can send multiple request within one TCP connection (3 way handshake). 
Virtual hosts -use "Host" header to send request go given domain on the server (one from many).

HTTP/2
MULTIPLEXATION - interlacement many transactions within one TCP connection (two or more requests and two or more responses at the same time) 
______________________________________________________________________________________________________________
CURL - commandline http client

>               -request    
<               -response
Accept: */*     -client will accept any type of content as response

curl -s -v -o /dev/null http://admin.com
-v          -verbose, 
-I          -curl by default prints only response body, use -I to see metadata
-i          -show body and metadata (headers)
-L          -follow redirect locations
-k          -ignore SSL errors
-A          -change user agent
    -A 'Internet Explorer'
-X          - change method
    -X POST
-d "key=value"  -send DATA using POST methd
--referer "hostname.com"    -set custom referer 
--cookie "name=peter"       -send custom cookie 
    -b "name=peter"         -shorter version
--cookie-jar file.txt       -cookie jar store all cookies sent from server
    -b file.txt             -sending cookies stored in cookie jar to use the same session 
-s          -silent mode: don`t show progress meter or error messages
-o <file>   -output response to file
-H "header: value" -send custom header
    -H 'Content-type: appplication/json'
-m 3            -set response timeout to 3s
--retry 3       -set 3 retries
-O <file>   -download file from server #curl -O https://curl.haxx.se/snapshots/curl-7.56.0-20170913.tar.xz

curl -H "Host: www.admin.com" -s -v -o /dev/null 54.239.192.53      #will check if server will response the same from www.admin.com as admin.com

cURL -copy as URL, Google chrome function that generates curl command which simulates browser work 
______________________________________________________________________________________________________________

Base 64 - encoding data (binary to text for sending), increase volume (1.33x) 
graphics in css as base 64. Multiple sending the same data, if overhead (narzut: 1.33) is smaller than http headers its better to have graphics in css (small files)
______________________________________________________________________________________________________________

% coding - is used to send charaters that are restricted in HTML (space, &, #)
&       -%26
space   -%20 (or +)
+       -%2b

______________________________________________________________________________________________________________
Coding with entities:
 lt, &amp, etc. Used in HTML. Cannot be used in URLs.
______________________________________________________________________________________________________________
Cookies
Flags: http ony, secure
path
time to use
volume (1MB?), types of content? 

______________________________________________________________________________________________________________
API -Application Program Interface
Structured request and structured response.
API is like waiter in restaurant. You are client, and you place an order, waiter brings requested meal from kitchen (server).

REST API (REpresentational State Transfer)
-internet service that use HTTP methods to communicate with other serices
-to locate content use structures similar to directories tree.
-use JSON 

HTTP conection between endpointa for exchanging data (in JSON as transport format).
Use: GET, POST, PUT (edition, change whole object), PATCH (edition, change only part of object), DELETE.

GET     - retrieve data from specified resource
POST    - submit data to be processed to a specified resource
PUT     - update a specified resource
DELETE  -delete a specified rosource
HEAD    -like GET but only response with header (no body)
PATCH   -update partial resources

GET https://mysite/api/users
GET https://mysite/api/users/1
POST https://mysite/api/users
PUT https://mysite/api/users/1
DELETE https://mysite/api/users/1

Authentication:
curl 'https://api.github.com/users/whatever?client_id=xxx&client_secret=yyy'   
curl -H "Authorization: token OAUTH-TOKEN" https://api.github.com
curl https://api.github.com/?access_token=OAUTH-TOKEN



curl https://api.github.com/users/lukcic


htps://developer.github.com/v3/users

______________________________________________________________________________________________________________
SOAP API
-use XML
-raw and complicated multilevel outlines for interaction between systems
-all requests are processed using only few URLs

______________________________________________________________________________________________________________

Event-driven APIs

Event driven means, that client don`t need to ask server all time about task status. 
Instead server can inform client when state of task changes.

1. Webhooks
Client must register itself on server with 2 informations: events that client is interested and callback URL, 
where server can send information.
Client exposes endpoint. Server (API provider) sends request (usually post) with informations that client needed.

Problems:
* failueres - needed retry process, API provider must implements retry policies
* firewalls - apps running behind firewalls can send information to the internet, but receiving may be hard
* noise - multiple events can be noisy

2. Websockets
Clinet sends handshake to server, server responds with websocket upgrade which is allow to long-live BIDIRECTIONAL communication.
Both then can send informations to each other. Use case - messagig applications.
Pros: bidorectional low latency communication, reduced overhead of HTTP requests.
Cons: Clients are responsible for connections (reconnections), scalability challenges. 


3. HTTP streaming

Typical server`s HTTP response has a finite lenght. With HTTP streaming response can be INFINITE.
Clients sends one request. The server continues to push data in a single long-lived connection,
for as long as client needed. 

Response can be set as stream in 2 ways:
1. Transfer Encoding header: chunked
Client then knows that data will be arrived in chunks.
Common for non-browser clients (2 backend servers communicating with each other).

2. Server side events
For a clients who consume data through browser. Standarized event source API web interface. 
Ex: twitter pushes new tweets over a single HTTP connection to the API consumers.
This method saves resources on both sides.
Pros: streaming over simple HTTP, native browser support.
Cons: bidirectional communiation is challenging, buffering problems.
______________________________________________________________________________________________________________

Simple HTTP load test

Apache Bench - package https-tools

```sh
ab -n 500000 -c 15 -t 300 -s 120 -r www.example.pl 
```

Will send 500k requests with 15 threads. Test will take 600sec with 120s connection. time limit.

______________________________________________________________________________________________________________
request library in python

Web Security academy:
https://portswigger.net/web-security/learning-path

______________________________________________________________________________________________________________

The most common types are:

Type application:

 application/java-archive
 application/EDI-X12   
 application/EDIFACT   
 application/javascript   
 application/octet-stream   
 application/ogg   
 application/pdf  
 application/xhtml+xml   
 application/x-shockwave-flash    
 application/json  
 application/ld+json  
 application/xml   
 application/zip  
 application/x-www-form-urlencoded  
Type audio:

 audio/mpeg   
 audio/x-ms-wma   
 audio/vnd.rn-realaudio   
 audio/x-wav   
Type image:

 image/gif   
 image/jpeg   
 image/png   
 image/tiff    
 image/vnd.microsoft.icon    
 image/x-icon   
 image/vnd.djvu   
 image/svg+xml    
Type multipart:

 multipart/mixed    
 multipart/alternative   
 multipart/related (using by MHTML (HTML mail).)  
 multipart/form-data  
Type text:

 text/css    
 text/csv    
 text/html    
 text/javascript (obsolete)    
 text/plain    
 text/xml    
Type video:

 video/mpeg    
 video/mp4    
 video/quicktime    
 video/x-ms-wmv    
 video/x-msvideo    
 video/x-flv   
 video/webm   
Type vnd:

 application/vnd.android.package-archive
 application/vnd.oasis.opendocument.text    
 application/vnd.oasis.opendocument.spreadsheet  
 application/vnd.oasis.opendocument.presentation   
 application/vnd.oasis.opendocument.graphics   
 application/vnd.ms-excel    
 application/vnd.openxmlformats-officedocument.spreadsheetml.sheet   
 application/vnd.ms-powerpoint    
 application/vnd.openxmlformats-officedocument.presentationml.presentation    
 application/msword   
 application/vnd.openxmlformats-officedocument.wordprocessingml.document   
 application/vnd.mozilla.xul+xml   