Web Server Gateway Interface (WSGI) - standard to connecting web aplications with different www servers (nginx. gunicorn etc.)

https://www.tecmint.com/nginx-web-server-security-hardening-and-performance-tips/

Nginx has one master process and several worker processes. 
Master process is responsible for reading and evaluating (ocenianie) configuration and it`s managing (maintaining) worker processes. 
Worker processes are handling (processing) requests. Number of worker processes is defined in config file or can be adjusted to processor cores number.
Ubuntu and Debian use so many workers as cores server has. In RHEL by default is configured 1 worker. 
Master process works with root priviledges to open low ports (under 1024) and workera use priviledges of normal user.

Daemon binary:
/sbin/nginx       #RHEL
/usr/sbin/nginx   #Debian/Ubuntu

/etc/nginx/nginx.conf    - configuration file

Virtual hosts config:
/etc/nginx/conf.d/            #RHEL
/etc/nginx/sites-available    #Debian/Ubuntu
/etc/nginx/sites-enabled

Default user:
nginx       #RHEL
www-data    #Debian/Ubuntu

nginx -s [signalname]
-stop - fast shutdown
-quit - graceful shutdown (bezpieczne zamkniecie), waits for worker process to finish requests (kill -s QUIT [pid])
-reload - reload the configuration file, master process waits to workers finish requests and then reload the configuration (nginx -t)
-reopen - reopening the log files

nginx -c [FILE] - start nginx with custom config file
__________________________________________________________________________
events {}                   # events context congigures connections, if ommited, then default values  
                            # one worker with low priviledges, port 80 if root, if not 8000, logs to /var/log/nginx

http {                      # {} -block called context
  server {                  # contexts called server define virtual hosta
      location / {
          server_name admin.com www.admin.com       # server_name context defines aliases (subdomains), may be regex
          root /data/www;
      }

      location /images/ { # paths in context location MUST ends with /!!!! Othercase PathTraversal vulnerability 
          root /data;
      }
  }
}

This config is working server that is listening on port 80 and is accessible from http://localhost/. 
In response to request with URIs starting with /images/ the serwer will sends files from the /data/images/. 

Example:
http://localhost/images/example.png
gives
/data/images/example.png

If not exist, nginx will send response with 404 error.

Request that are not starting with /images will be mapped on to /data/www directory. Example:
http://localhost/some/example.html
gives
/data/www/some/exaplme.html

__________________________________________________________________________
Config with regex for virtual hosts:

http {
  server {
    server_name ~^(www\.)?(?<domain>(example|admin).com)$;
    root /var/www/$domain;
  }
}

Regex thats starts with ~ match to example.com and admin.com (with optional www.). 
Value of matched domain is stored in variable $domain, that is used for matching which directory should be used.
In this case every request will be checked with regex that can affect on server load.
__________________________________________________________________________
Two versions of web page depends on which IP adrress receives request:

server {
  listen 10.0.10.10:80      #server network interface
  server_name admin.com www.admin.com;
  root /var/www/admin.com/site1;
}
  server {
  listen 10.0.10.11:80
  server_name admin.com www.admin.com;
  root /var/www/admin.com/site2;
}
__________________________________________________________________________

Setting config files:

Default nginx.conf in Ubuntu:
include /etc/nginx/conf.d/*.conf

With this global config, all child configs inherrit global settings. 

__________________________________________________________________________
/etc/nginx/sites-available/default
server {  
  listen 80 default_server; 

  server_name localhost;  

  root /usr/share/nginx/html;  
  index index.html index.htm;  

  location / {
    try_files $uri $uri/ =404;
  }
}
__________________________________________________________________________
Errors:
access.log or error.log in directory:
/usr/local/nginx/logs
/var/log/nginx
__________________________________________________________________________
SSL TLS certificates:

server {
  listen 443;
  ssl on;
  ssl_certificate /etc/ssl/certs/admin.com.crt;           # permissions 444
  ssl_certificate_key /etc/ssl/private/admin.com.crt;     # permissions 400
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;                    # without SSL
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE...        # cutted (check Mozilla Server Side TLS), only strong ciphers (szyfry)
  ssl_prefer_server_ciphers on;                           # rely only on server (not client) cipher list

  server_name admin.com www.admin.com;
  root /var/www/admin.com/site1;
}
__________________________________________________________________________
Setting Up a Simple Proxy Server
One of the frequent uses of nginx is setting it up as a proxy server, which means a server that receives requests, 
passes them to the proxied servers, retrieves responses from them, and sends them to the clients.

Basic proxy server, which serves requests of images with files from the local directory and sends all other requests to a proxied server. 
In this example, both servers are defined on a single nginx instance.

server {
    location / {
        proxy_pass http://localhost:8080/;
    }

    location ~ \.(gif|jpg|png)$ {
        root /data/images;
    }
}

The parameter is a regular expression matching all URIs ending with .gif, .jpg, or .png. A regular expression should be preceded with ~. 
The corresponding requests will be mapped to the /data/images directory.
When nginx selects a location block to serve a request it first checks location directives that specify prefixes, 
remembering location with the longest prefix, and then checks regular expressions. 
If there is a match with a regular expression, nginx picks this location or, otherwise, it picks the one remembered earlier.

This server will filter requests ending with .gif, .jpg, or .png and map them to the /data/images directory (by adding URI to the root directive’s parameter) 
and pass all other requests to the proxied server configured above.

#Enable HTTP basic_auth between proxy and servers? 
__________________________________________________________________________

Load balancing:

upstream admin-servers {                      # define servers group
  server web1.admin.com:8080 max_fails=2;     # max connection tries equal 2 
  server web2.admin.com:8080 max_fails=2;
}

http {
  server {
    server_name admin.com www.admin.com;
    location / {
      proxy_pass http://admin-servers;      # traffic for (www.)admin.com is proxied for servers web1 and web2 with rotary method (round-robin)
      health_check interval=30 fails=3 passes=1 uri=/health_check   # check servers every 30 seconds using /health_check
      match=admin-health                                            # if 3 checks fails then nginx set server status as failed 
    }                                                               # after 1 pased check nginx set server status as working again
  }
  match admin-health {                                              # "match" defines conditions to fulfill needed to pass test
    status 200;
    header Content-Type = text/html;
    body ~ "Dowódca czerwonych gotowy";
  }
}


Nginx uses the following load balancing methods:
-round-robin (default method) – requests to the upstream servers are distributed in a round-robin fashion (in order of the list of servers in the upstream pool).
-least-connected – here the next request is proxied to the server with the least number of active connections.
-ip-hash – here a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address).
-Generic hash – under this method, the system administrator specifies a hash (or key) with the given text, variables of the request or runtime, or their combination. For example, the key may be a source IP and port, or URI. Nginx then distributes the load amongst the upstream servers by generating a hash for the current request and placing it against the upstream servers.
-Least time (Nginx Plus) – assigns the next request to the upstream server with the least number of current connections but favors the servers with the lowest average response times.
__________________________________________________________________________
Reinstall:
-remove  with purge nginx-common
-remove nginx-core